#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure") _

//noinspection GroovyAssignabilityCheck
properties([
		parameters([
			choice(name: 'ENVIRONMENT', choices: 'sandbox\nsaat\nsprod\nnonprod\nprod', description: 'Environment where code should be build and deployed')
		])
])


String product = "probate"
String component = "business-service"

List<LinkedHashMap<String, Object>> secrets = [
    secret('probatePersistenceUrl', 'TEST_PERSISTENCE_URL'),
    secret('probateNotifyMobile', 'TEST_MOBILE'),
    secret('pdfservice-url', 'TEST_PDFSERVICE_URL'),
    secret('serviceAuthProviderBaseUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
    secret('s2sAuthTotpSecret', 'S2S_AUTH_TOTP_SECRET'),
    secret('probateIdamSecret', 'IDAM_SECRET'),
    secret('probateIdamUserName', 'IDAM_USERNAME'),
    secret('probateIdamPassword', 'IDAM_USERPASSWORD')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withParameterizedPipeline('java', product, component, params.ENVIRONMENT, 'sandbox') {
    loadVaultSecrets(secrets)
    after('test') {
        publishHTML target: [
                alwaysLinkToLastBuild: true,
                reportDir            : "build/reports/tests/test",
                reportFiles          : "index.html",
                reportName           : "sol-ccd-service Test Report"
        ]

        publishHTML target: [
                alwaysLinkToLastBuild: true,
                reportDir            : "build/reports/jacoco",
                reportFiles          : "index.html",
                reportName           : "sol-ccd-service Code Coverage Report"
        ]

        publishHTML target: [
                alwaysLinkToLastBuild: true,
                reportDir            : "build/reports/findbugs",
                reportFiles          : "main.html",
                reportName           : "sol-ccd-service find Bugs Report"
        ]
    }

    after('functionalTest:saat') {
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "SAAT Functional Tests",
                alwaysLinkToLastBuild: true
        ]
    }
}
